<script src="https://d3js.org/d3.v3.min.js" charset="utf-8"></script>

  <style>
    @import url(http://fonts.googleapis.com/css?family=Source+Code+Pro:400,600);
/*    body {font-family: "Source Code Pro", Consolas, monaco, monospace; line-height: 160%; font-size: 16px;  margin: 0; }
*/    path.link {
      fill: none;
      stroke-width: 2px;
    }
    .node:not(:hover) .nodetext {
      display: none;
    }
    h2, h3 { font-size: 18px; margin: 5px 0 ; font-weight: normal;}

    a:visited { color: #EE3124; }
    a:hover { color: #A4CD39; text-decoration: underline;}
    a:active { color: #EE3124; }
  </style>

  <%= render "layouts/searchbar" %>

  <div class="links-buttons">
    <div>
      <%= link_to 'List', folders_path, class: "folders-link active" %>
    </div>
    <div>
      <%= link_to 'Map', visualisations_path, class: "maps-link"  %>
    </div>
  </div>
    <!-- container for force layout visualisation  -->
  <section id="folders_map"></section>

  <script>

  (function()
  {
    if( window.localStorage )
    {
      if( !localStorage.getItem('firstLoad') )
      {
        localStorage['firstLoad'] = true;
        window.location.reload();
      }
      else
        localStorage.removeItem('firstLoad');
    }
  })();

  // some colour variables
  var tcBlack = "#130C0E";

  // rest of vars
  var w = 960,
  h = 800,
  maxNodeSize = 50,
  x_browser = 20,
  y_browser = 25,
  root;

  var visualisation;
  var force = d3.layout.force();

  visualisation = d3.select("#folders_map").append("svg").attr("width", w).attr("height", h);
  data = ("<%= params[:folder_id] %>") > 0 ? "data_folder/<%= params[:folder_id] %>" : "data";
  d3.json(data, function(json) {
    console.log(json);
    root = json;
    root.fixed = true;
    root.x = w / 2;
    root.y = h / 4;


          // Build the path
          var defs = visualisation.insert("svg:defs")
          .data(["end"]);

          defs.enter().append("svg:path")
          .attr("d", "M0,-5L10,0L0,5");

          update();
        });


  /**
   *
   */
   function update() {
    var nodes = flatten(root),
    links = d3.layout.tree().links(nodes);

    // Restart the force layout.
    force.nodes(nodes)
    .links(links)
    .gravity(0.05)
    .charge(-1500)
    .linkDistance(100)
    .friction(0.5)
    .linkStrength(function(l, i) {return 1; })
    .size([w, h])
    .on("tick", tick)
    .start();

    var path = visualisation.selectAll("path.link")
    .data(links, function(d) { return d.target.url; });

    path.enter().insert("svg:path")
    .attr("class", "link")
        // .attr("marker-end", "url(#end)")
        .style("stroke", "#A9A9A9");


    // Exit any old paths.
    path.exit().remove();



    // Update the nodesâ€¦
    var node = visualisation.selectAll("g.node")
    .data(nodes, function(d) { return d.id; });


    // Enter any new nodes.
    var nodeEnter = node.enter().append("svg:g")
    .attr("class", "node")
    .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
    .on("click", click)
    .call(force.drag);

    // Append a circle
    nodeEnter.append("svg:circle")
    .attr("r", function(d) { return Math.sqrt(d.size) / 10 || 4.5; })
    .style("fill", "#A9A9A9");


    // Append images
    var images = nodeEnter.append("svg:image")
    .attr("href",  function(d) { return d.favicon;})
    .attr("x", function(d) { return -25;})
    .attr("y", function(d) { return -25;})
    .attr("height", 50)
    .attr("width", 50);

    // make the image grow a little on mouse over and add the text details on click
    var setEvents = images
            // Append hero text
            .on( 'click', function (d) {
              d3.select("h2").html(d.name);
              console.log(d.url)
              if (d.url != undefined){
                window.open(d.url);
              } else {
                console.log("no url");
              }
            })

            .on( 'mouseenter', function() {
              // select element in current context
              d3.select( this )
              .transition()
              .attr("x", function(d) { return -60;})
              .attr("y", function(d) { return -60;})
              .attr("height", 100)
              .attr("width", 100);
            })
            // set back
            .on( 'mouseleave', function() {
              d3.select( this )
              .transition()
              .attr("x", function(d) { return -25;})
              .attr("y", function(d) { return -25;})
              .attr("height", 50)
              .attr("width", 50);
            });

    // Append hero name on roll over next to the node as well
    nodeEnter.append("text")
    .attr("class", "nodetext")
    .attr("x", x_browser)
    .attr("y", y_browser +15)
    .attr("fill", tcBlack)
    .text(function(d) { return d.name; });


    // Exit any old nodes.
    node.exit().remove();


    // Re-select for update.
    path = visualisation.selectAll("path.link");
    node = visualisation.selectAll("g.node");

    function tick() {


      path.attr("d", function(d) {

       var dx = d.target.x - d.source.x,
       dy = d.target.y - d.source.y,
       dr = Math.sqrt(dx * dx + dy * dy);
       return   "M" + d.source.x + ","
       + d.source.y
       + "A" + dr + ","
       + dr + " 0 0,1 "
       + d.target.x + ","
       + d.target.y;
     });
      node.attr("transform", nodeTransform);
    }
  }


  /**
   * Gives the coordinates of the border for keeping the nodes inside a frame
   * http://bl.ocks.org/mbostock/1129492
   */
   function nodeTransform(d) {
    d.x =  Math.max(maxNodeSize, Math.min(w - (d.imgwidth/2 || 16), d.x));
    d.y =  Math.max(maxNodeSize, Math.min(h - (d.imgheight/2 || 16), d.y));
    return "translate(" + d.x + "," + d.y + ")";
  }

  /**
   * Toggle children on click.
   */
   function click(d) {
    if (d.children) {
      d._children = d.children;
      d.children = null;
    } else {
      d.children = d._children;
      d._children = null;
    }

    update();
  }


  /**
   * Returns a list of all nodes under the root.
   */
   function flatten(root) {
    var nodes = [];
    var i = 0;

    function recurse(node) {
      if (node.children)
        node.children.forEach(recurse);
      if (!node.id)
        node.id = ++i;
      nodes.push(node);
    }

    recurse(root);
    return nodes;
  }
  </script>



